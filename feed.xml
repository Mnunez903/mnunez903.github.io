<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-11-17T11:56:00-05:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>LANLEY</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/17/lanley.html"/>
    <id>http://blog.url.com/2016/11/17/lanley.html</id>
    <published>2016-11-17T11:56:00-05:00</published>
    <updated>2016-11-17T14:18:49-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;LANLEY&lt;/h1&gt;

&lt;p&gt;I recently attended a Q&amp;amp;A Session with Martin Fowler. Mr. Fowler is known for many of his tech books, including &lt;strong&gt;Refactoring&lt;/strong&gt;, and &lt;strong&gt;Domain Specific Languages&lt;/strong&gt;. In the talk, there was a piece on being interested in multiple languages. Someone who may be a Front-End developer should be interested in Back-End related work and vice versa. He said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A good colleague of mine mentioned &amp;ldquo;Learn a New Language Every Year.&amp;rdquo; Every developer should strive to learn at least one new language every year. When you do, you can expand your thinking capabilities when solving complex problems&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wanted to run through my years in this entry. I definitely have some catching up to do!&lt;/p&gt;

&lt;h2&gt;Before my Career &amp;ndash; College&lt;/h2&gt;

&lt;p&gt;In college, I was a really big &lt;strong&gt;&lt;em&gt;C#&lt;/em&gt;&lt;/strong&gt; individual. My final project was in &lt;strong&gt;&lt;em&gt;C#&lt;/em&gt;&lt;/strong&gt;, and thought it was the best programming language ever! I definitely enjoyed the concept of OOP, and I wanted to expand on that programming model. It wasn&amp;rsquo;t until a year later where I landed my first job.&lt;/p&gt;

&lt;h2&gt;Career&lt;/h2&gt;

&lt;h3&gt;2011&lt;/h3&gt;

&lt;p&gt;I worked at a consulting company where their clients were predominately finance companies. Got a chance to work at an Investment Bank in Stamford, CT. This position was all &lt;strong&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/strong&gt;. Once I was collecting a paycheck, I had completely forgot about &lt;strong&gt;&lt;em&gt;C#&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;2012&lt;/h3&gt;

&lt;p&gt;Still at the same client, but was heavily interested in &lt;strong&gt;&lt;em&gt;Test Driven Development&lt;/em&gt;&lt;/strong&gt;. My boss said while testing is useful, it eats up too much time, and he didn&amp;rsquo;t want to do it in our project. He managed to find a team that would work with me within the company where I was able to write some tests! The team used &lt;strong&gt;&lt;em&gt;TestNG&lt;/em&gt;&lt;/strong&gt;. It had a difficult learning curve for me, but I got over it. Testing was fun, but it wasn&amp;rsquo;t &amp;lsquo;til next year where I got more familiar with &lt;strong&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/strong&gt;. This isn&amp;rsquo;t a language learning per se, but it was a new (testing) framework.&lt;/p&gt;

&lt;h3&gt;2013&lt;/h3&gt;

&lt;p&gt;I joined another consulting company (pattern, much?) that was big on &lt;strong&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/strong&gt;, The Agile Methodology, and Pairing. Here, I had to pick up &lt;strong&gt;&lt;em&gt;Ruby&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Rails&lt;/em&gt;&lt;/strong&gt;, and learn a little &lt;strong&gt;&lt;em&gt;Twitter Bootstrap.&lt;/em&gt;&lt;/strong&gt; I had a lot of fun test driving features with a pair. It was really comfortable to be able to learn good practices, and having someone help get rid of bad habits was also a plus! I definitely enjoyed developing in &lt;strong&gt;&lt;em&gt;Ruby&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;2014&lt;/h3&gt;

&lt;p&gt;Sadly enough, 2014 was the same as 2013. Each client I worked on was pretty much a &lt;strong&gt;&lt;em&gt;Rails&lt;/em&gt;&lt;/strong&gt; project. I did get better throughout time with &lt;strong&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/strong&gt; which is always helpful.&lt;/p&gt;

&lt;h3&gt;2015&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s where I was forced to switch it up! &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt; was a hot commodity, so I had dived head first into &lt;strong&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/strong&gt;. That felt difficult, but definitely got over it relatively quick. That includes testing in &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt; using &lt;strong&gt;&lt;em&gt;Jasmine&lt;/em&gt;&lt;/strong&gt;. It was a ton of fun! I continue to be working on &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt; at the moment!&lt;/p&gt;

&lt;h3&gt;2016&lt;/h3&gt;

&lt;p&gt;As of right now, I&amp;rsquo;m still at a place that uses &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt;. On my own, I&amp;rsquo;ve been trying to learn &lt;strong&gt;&lt;em&gt;Elixir&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;Elixir&lt;/em&gt;&lt;/strong&gt; is part of the reason I started this blog. I look forward to what I will be doing with &lt;strong&gt;&lt;em&gt;Elixir&lt;/em&gt;&lt;/strong&gt;, but the end of the year is coming up soon!!&lt;/p&gt;

&lt;p&gt;According to the quote above, I may have missed 2 languages (2012 and 2014). What&amp;rsquo;s next for 2017? I don&amp;rsquo;t know. Any new Languages? Maybe a new framework? We&amp;rsquo;ll see! One thing is for sure:&lt;/p&gt;

&lt;h3&gt;Learn a New Language Every Year!&lt;/h3&gt;

&lt;p&gt;&lt;img class="image" alt="giphy genius homer simpson"src="http://i.giphy.com/eMu0803X2zkWY.gif"&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>List and Recursion 2</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/29/list-and-recursion-2-official-post.html"/>
    <id>http://blog.url.com/2016/09/29/list-and-recursion-2-official-post.html</id>
    <published>2016-09-29T16:18:00-04:00</published>
    <updated>2016-09-30T10:52:54-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;&lt;strong&gt;&lt;strong&gt;Elixir&lt;/strong&gt;&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m currently reading the Programming Elixir book by Dave Thomas, which has been
very good so far! Slowly but surely, I&amp;rsquo;m picking up some Elixir skills. I maybe should start from the beginning sometime soon, but now that I&amp;rsquo;m starting to blog in the middle of the book, I&amp;rsquo;ll just start with the current problem, and try to fill in any weird Elixir tricks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise: ListAndRecursion-2&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a &lt;code&gt;max(list)&lt;/code&gt; that returns the element with the maximum value in the list (This
is slightly trickier than it sounds.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the solution is what I came up to get it to work. I will talk about some mistakes that I made along the way
and fix up the final solution.&lt;/p&gt;

&lt;p&gt;Here is my solution:&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me try to explain.&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;findMaxNumber(list)&lt;/code&gt; with the &lt;code&gt;list = [0,1,5,2]&lt;/code&gt;, we call the first function.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; findMaxNumber(list)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which then matches&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Elixir, and many other languages, a List is simply two nodes, where &lt;code&gt;head&lt;/code&gt; is the first item in the list, while the tail is the rest of the items.&lt;/p&gt;

&lt;p&gt;So when an array of &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; is broken down, &lt;code&gt;head = 1&lt;/code&gt; while &lt;code&gt;tail = [2,3,4,5]&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ends up calling&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which looks like the following:&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and calls &lt;code&gt;findMaxNumber&lt;/code&gt; recursively while passing in the function &lt;code&gt;choose&lt;/code&gt;. &lt;code&gt;choose&lt;/code&gt; would return the greater value of the two
values. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findMaxNumber([5,2], choose(1, 0, 1&amp;gt;0))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;since &lt;code&gt;1&amp;gt;0&lt;/code&gt;, the choose function &lt;code&gt;def choose(a, _, true), do: a&lt;/code&gt; will match, since it&amp;rsquo;s true.&lt;/p&gt;

&lt;p&gt;then calls &lt;code&gt;findMaxNumber&lt;/code&gt; again with the new variables:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findMaxNumber([5|[2]], 1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This time, &lt;code&gt;head&lt;/code&gt; will be greater than &lt;code&gt;value&lt;/code&gt;! so the recursive function&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findMaxNumber([2], choose(5, 1, 5&amp;gt;1))&lt;/code&gt; would make &lt;code&gt;choose&lt;/code&gt; return true.&lt;/p&gt;

&lt;p&gt;the next iteration would look like this: &lt;br/&gt;
&lt;code&gt;def findMaxNumber([2|[]], 5), do:&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;findMaxNumber([], choose(2, 5, 2&amp;gt;5))&lt;/code&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;choose(2, 5, 2&amp;gt;5))&lt;/code&gt; would match the false choose function which is &lt;code&gt;def choose(_, b, false), do: b&lt;/code&gt;
and 5 would remain the higher value.&lt;/p&gt;

&lt;p&gt;Since the last function will be &lt;code&gt;findMaxNumber([], value)&lt;/code&gt;, it would just return the value!&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the solution. There&amp;rsquo;s an  issue I need to get to.&lt;/p&gt;

&lt;h2&gt;Refactor Time&lt;/h2&gt;

&lt;p&gt;First, I noticed I can refactor the &lt;code&gt;choose&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;can be&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;ve been able to refactor the function this far&amp;hellip;&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Definitely fun stuff!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My blog, and the beginning!</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/26/starting-my-blog.html"/>
    <id>http://blog.url.com/2016/09/26/starting-my-blog.html</id>
    <published>2016-09-26T17:15:00-04:00</published>
    <updated>2016-09-30T10:24:39-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is just me starting my blog. It took me a lot of time and energy to even get this started. I hope I continue to produce content for it!!&lt;/p&gt;

&lt;p&gt;To good content!&lt;/p&gt;

&lt;p&gt;&lt;img class="image" src="http://i.giphy.com/n95c3anASCaGY.gif"&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
