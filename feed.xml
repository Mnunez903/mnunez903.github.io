<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-01-06T17:20:00-05:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>tail-call-optimization-in-elixir</title>
    <link rel="alternate" href="http://blog.url.com/2017/01/06/tail-call-optimization-in-elixir.html"/>
    <id>http://blog.url.com/2017/01/06/tail-call-optimization-in-elixir.html</id>
    <published>2017-01-06T17:20:00-05:00</published>
    <updated>2017-01-06T17:43:46-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Elixir&lt;/h1&gt;

&lt;h2&gt;Tail Call Optimization with Fibonacci&lt;/h2&gt;

&lt;p&gt;Today, we&amp;rsquo;ll discuss Tail Call Optimization, and how it is useful in very complex problems that we may run into on a day to day basis.&lt;/p&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In computer science, a tail call is a subroutine call performed as the final action of a procedure. If a tail call might lead to the same subroutine being called again later in the call chain, the subroutine is said to be tail-recursive, which is a special case of recursion.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tail recursion is calling a function that will return the same function with different variables. Rather than adding a new function call to the stack, it will return the function with the new variables.&lt;/p&gt;

&lt;p&gt;In the example, we will use Fibonacci written in both Ruby and Elixir. We will also optimize the Elixir example to use Tail Call Optimization.&lt;/p&gt;

&lt;p&gt;In Ruby, the code looks like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;ender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;
  &lt;span class="n"&gt;amount_of_time_used&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ender&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The fibonacci number was &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Fibonacci for number placed &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; finished in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;amount_of_time_used&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds!"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"You're trying to find a Fibonacci Number under Zero. Please try again."&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This app simply starts a timer, get&amp;rsquo;s the Fibonacci number to the &lt;code&gt;n&lt;/code&gt;&amp;rsquo;s place. When we run it to the 40th place, we get
following:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2.3.0 :015 &amp;gt; start(40)
The fibonacci number was 102334155
Fibonacci for number placed 40 finished in 20 seconds!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Elixir, we have a similar solution:&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Fibonacci&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fibonacciNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;totalTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The fibonacciNumber was &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;fibonacciNumber&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fibonacci for number placed &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; finished in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;totalTime&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds!"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You're trying to find a Fibonacci Number under Zero. Please try again."&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Very similar to the ruby example, the timer starts, calls the &lt;code&gt;getNumber&lt;/code&gt; function, and returns the number.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; Fibonacci.start(40)
The fibonacciNumber was 102334155.
Fibonacci for number placed 40 finished in 5 seconds!
:ok
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One noticeable difference is that it took 15 longer for the ruby solution to find the same Fibonacci number!&lt;/p&gt;

&lt;p&gt;But we can definitely make this faster with Tail Call Optimization. We will make some changes to our &lt;code&gt;getNumber&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Fibonacci&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fibonacciNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;totalTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The fibonacciNumber was &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;fibonacciNumber&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fibonacci for number placed &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; finished in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;totalTime&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds!"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You're trying to find a Fibonacci Number under Zero. Please try again."&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is very common practice to have an interface of &lt;code&gt;getNumber&lt;/code&gt; with an arity 1, that then calls a
private function with a greater arity to facilitate the Tail Call Optimization pattern.&lt;/p&gt;

&lt;p&gt;The very first function of &lt;code&gt;getNumber(n)&lt;/code&gt; calls the private function with a variable signature containing the place in
the Fibonacci sequence, the starting number, and it&amp;rsquo;s previous number. Since the first number is 0, and the next number
1, we can use those to start our Fibonacci function.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s where the magic happens! When we call &lt;code&gt;defp getNumber(n, next, result)&lt;/code&gt;,
we call the very same function, but with different parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do: getNumber(n-1, next+result, next)&lt;/code&gt;. It subtracts 1 from the sequence, since we&amp;rsquo;re counting down to zero, it adds
the result to the next number, and the next number becomes the result. Since the function is calling itself, it doesn&amp;rsquo;t
have to place a new function in the stack. It calls the same function with new parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;defp getNumber(0, _, result), do: result&lt;/code&gt; states that when the number has reached zero, return the result.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; Fibonacci.start(40)
The fibonacciNumber was 102334155.
Fibonacci for number placed 40 finished in 0 seconds!
:ok
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK speedy, let&amp;rsquo;s see you try a bigger number!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(2)&amp;gt; Fibonacci.start(100)
The fibonacciNumber was 354224848179261915075.
Fibonacci for number placed 100 finished in 0 seconds!
:ok
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o.O! Wise guy, eh?!&lt;/p&gt;

&lt;p&gt;BIGGER!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(3)&amp;gt; Fibonacci.start(10000)
The fibonacciNumber was
Fibonacci for number placed 10000 finished in 0 seconds!
:ok
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is getting out of hand&amp;hellip;&lt;/p&gt;

&lt;p&gt;In fact, I was able to go up to 100,000! Check it out!!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; Fibonacci.start(100000)
The fibonacciNumber was
Fibonacci for number placed 100000 finished in 0 seconds!
:ok
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty amazing stuff!!&lt;/p&gt;

&lt;p&gt;Finally getting the hang of Tail Call Optimization! Let me know what you think, and what other real world solutions would you use it in!&lt;/p&gt;

&lt;p&gt;&lt;img class="image" alt="Elixir being created" src="http://i.giphy.com/11esvka21qxcbK.gif"&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Learn a New Language Every Year</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/17/lanley.html"/>
    <id>http://blog.url.com/2016/11/17/lanley.html</id>
    <published>2016-11-17T11:56:00-05:00</published>
    <updated>2017-01-06T17:42:23-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;LANLEY&lt;/h1&gt;

&lt;p&gt;I recently attended a Q&amp;amp;A Session with Martin Fowler. Mr. Fowler is known for many of his tech books, including &lt;strong&gt;Refactoring&lt;/strong&gt;, and &lt;strong&gt;Domain Specific Languages&lt;/strong&gt;. In the talk, there was a piece on being interested in multiple languages. Someone who may be a Front-End developer should be interested in Back-End related work and vice versa. He said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A good colleague of mine mentioned &amp;ldquo;Learn a New Language Every Year.&amp;rdquo; Every developer should strive to learn at least one new language every year. When you do, you can expand your thinking capabilities when solving complex problems&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wanted to run through my years in this entry. I definitely have some catching up to do!&lt;/p&gt;

&lt;h2&gt;Before my Career &amp;ndash; College&lt;/h2&gt;

&lt;p&gt;In college, I was a really big &lt;strong&gt;&lt;em&gt;C#&lt;/em&gt;&lt;/strong&gt; individual. My final project was in &lt;strong&gt;&lt;em&gt;C#&lt;/em&gt;&lt;/strong&gt;, and thought it was the best programming language ever! I definitely enjoyed the concept of OOP, and I wanted to expand on that programming model. It wasn&amp;rsquo;t until a year later where I landed my first job.&lt;/p&gt;

&lt;h2&gt;Career&lt;/h2&gt;

&lt;h3&gt;2011&lt;/h3&gt;

&lt;p&gt;I worked at a consulting company where their clients were predominately finance companies. Got a chance to work at an Investment Bank in Stamford, CT. This position was all &lt;strong&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/strong&gt;. Once I was collecting a paycheck, I had completely forgot about &lt;strong&gt;&lt;em&gt;C#&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;2012&lt;/h3&gt;

&lt;p&gt;Still at the same client, but was heavily interested in &lt;strong&gt;&lt;em&gt;Test Driven Development&lt;/em&gt;&lt;/strong&gt;. My boss said while testing is useful, it eats up too much time, and he didn&amp;rsquo;t want to do it in our project. He managed to find a team that would work with me within the company where I was able to write some tests! The team used &lt;strong&gt;&lt;em&gt;TestNG&lt;/em&gt;&lt;/strong&gt;. It had a difficult learning curve for me, but I got over it. Testing was fun, but it wasn&amp;rsquo;t &amp;lsquo;til next year where I got more familiar with &lt;strong&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/strong&gt;. This isn&amp;rsquo;t a language learning per se, but it was a new (testing) framework.&lt;/p&gt;

&lt;h3&gt;2013&lt;/h3&gt;

&lt;p&gt;I joined another consulting company (pattern, much?) that was big on &lt;strong&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/strong&gt;, The Agile Methodology, and Pairing. Here, I had to pick up &lt;strong&gt;&lt;em&gt;Ruby&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Rails&lt;/em&gt;&lt;/strong&gt;, and learn a little &lt;strong&gt;&lt;em&gt;Twitter Bootstrap.&lt;/em&gt;&lt;/strong&gt; I had a lot of fun test driving features with a pair. It was really comfortable to be able to learn good practices, and having someone help get rid of bad habits was also a plus! I definitely enjoyed developing in &lt;strong&gt;&lt;em&gt;Ruby&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;2014&lt;/h3&gt;

&lt;p&gt;Sadly enough, 2014 was the same as 2013. Each client I worked on was pretty much a &lt;strong&gt;&lt;em&gt;Rails&lt;/em&gt;&lt;/strong&gt; project. I did get better throughout time with &lt;strong&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/strong&gt; which is always helpful.&lt;/p&gt;

&lt;h3&gt;2015&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s where I was forced to switch it up! &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt; was a hot commodity, so I had dived head first into &lt;strong&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/strong&gt;. That felt difficult, but definitely got over it relatively quick. That includes testing in &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt; using &lt;strong&gt;&lt;em&gt;Jasmine&lt;/em&gt;&lt;/strong&gt;. It was a ton of fun! I continue to be working on &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt; at the moment!&lt;/p&gt;

&lt;h3&gt;2016&lt;/h3&gt;

&lt;p&gt;As of right now, I&amp;rsquo;m still at a place that uses &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt;. On my own, I&amp;rsquo;ve been trying to learn &lt;strong&gt;&lt;em&gt;Elixir&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;Elixir&lt;/em&gt;&lt;/strong&gt; is part of the reason I started this blog. I look forward to what I will be doing with &lt;strong&gt;&lt;em&gt;Elixir&lt;/em&gt;&lt;/strong&gt;, but the end of the year is coming up soon!!&lt;/p&gt;

&lt;p&gt;According to the quote above, I may have missed 2 languages (2012 and 2014). What&amp;rsquo;s next for 2017? I don&amp;rsquo;t know. Any new Languages? Maybe a new framework? We&amp;rsquo;ll see! One thing is for sure:&lt;/p&gt;

&lt;h3&gt;Learn a New Language Every Year!&lt;/h3&gt;

&lt;p&gt;&lt;img class="image" alt="giphy genius homer simpson"src="http://i.giphy.com/eMu0803X2zkWY.gif"&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>List and Recursion 2</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/29/list-and-recursion-2-official-post.html"/>
    <id>http://blog.url.com/2016/09/29/list-and-recursion-2-official-post.html</id>
    <published>2016-09-29T16:18:00-04:00</published>
    <updated>2017-01-06T17:43:38-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;&lt;strong&gt;&lt;strong&gt;Elixir&lt;/strong&gt;&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m currently reading the Programming Elixir book by Dave Thomas, which has been
very good so far! Slowly but surely, I&amp;rsquo;m picking up some Elixir skills. I maybe should start from the beginning sometime soon, but now that I&amp;rsquo;m starting to blog in the middle of the book, I&amp;rsquo;ll just start with the current problem, and try to fill in any weird Elixir tricks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise: ListAndRecursion-2&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a &lt;code&gt;max(list)&lt;/code&gt; that returns the element with the maximum value in the list (This
is slightly trickier than it sounds.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the solution is what I came up to get it to work. I will talk about some mistakes that I made along the way
and fix up the final solution.&lt;/p&gt;

&lt;p&gt;Here is my solution:&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me try to explain.&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;findMaxNumber(list)&lt;/code&gt; with the &lt;code&gt;list = [0,1,5,2]&lt;/code&gt;, we call the first function.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; findMaxNumber(list)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which then matches&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Elixir, and many other languages, a List is simply two nodes, where &lt;code&gt;head&lt;/code&gt; is the first item in the list, while the tail is the rest of the items.&lt;/p&gt;

&lt;p&gt;So when an array of &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; is broken down, &lt;code&gt;head = 1&lt;/code&gt; while &lt;code&gt;tail = [2,3,4,5]&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ends up calling&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which looks like the following:&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and calls &lt;code&gt;findMaxNumber&lt;/code&gt; recursively while passing in the function &lt;code&gt;choose&lt;/code&gt;. &lt;code&gt;choose&lt;/code&gt; would return the greater value of the two
values. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findMaxNumber([5,2], choose(1, 0, 1&amp;gt;0))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;since &lt;code&gt;1&amp;gt;0&lt;/code&gt;, the choose function &lt;code&gt;def choose(a, _, true), do: a&lt;/code&gt; will match, since it&amp;rsquo;s true.&lt;/p&gt;

&lt;p&gt;then calls &lt;code&gt;findMaxNumber&lt;/code&gt; again with the new variables:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findMaxNumber([5|[2]], 1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This time, &lt;code&gt;head&lt;/code&gt; will be greater than &lt;code&gt;value&lt;/code&gt;! so the recursive function&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findMaxNumber([2], choose(5, 1, 5&amp;gt;1))&lt;/code&gt; would make &lt;code&gt;choose&lt;/code&gt; return true.&lt;/p&gt;

&lt;p&gt;the next iteration would look like this: &lt;br/&gt;
&lt;code&gt;def findMaxNumber([2|[]], 5), do:&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;findMaxNumber([], choose(2, 5, 2&amp;gt;5))&lt;/code&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;choose(2, 5, 2&amp;gt;5))&lt;/code&gt; would match the false choose function which is &lt;code&gt;def choose(_, b, false), do: b&lt;/code&gt;
and 5 would remain the higher value.&lt;/p&gt;

&lt;p&gt;Since the last function will be &lt;code&gt;findMaxNumber([], value)&lt;/code&gt;, it would just return the value!&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the solution. There&amp;rsquo;s an  issue I need to get to.&lt;/p&gt;

&lt;h2&gt;Refactor Time&lt;/h2&gt;

&lt;p&gt;First, I noticed I can refactor the &lt;code&gt;choose&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;can be&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;ve been able to refactor the function this far&amp;hellip;&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;findMaxNumber&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Definitely fun stuff!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My blog, and the beginning!</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/26/starting-my-blog.html"/>
    <id>http://blog.url.com/2016/09/26/starting-my-blog.html</id>
    <published>2016-09-26T17:15:00-04:00</published>
    <updated>2017-01-06T17:42:23-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is just me starting my blog. It took me a lot of time and energy to even get this started. I hope I continue to produce content for it!!&lt;/p&gt;

&lt;p&gt;To good content!&lt;/p&gt;

&lt;p&gt;&lt;img class="image" src="http://i.giphy.com/n95c3anASCaGY.gif"&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
